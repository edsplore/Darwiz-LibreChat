# Secure default configuration generated by Mozilla SSL Configuration Generator
# generated 2024-01-21, Mozilla Guideline v5.7, nginx 1.24.0, OpenSSL 3.1.4, intermediate configuration
# https://ssl-config.mozilla.org/#server=nginx&version=1.24.0&config=intermediate&openssl=3.1.4&guideline=5.7

# server {
#     listen 80 default_server;
#     listen [::]:80 default_server;

#     # To Configure SSL, comment all lines within the Non-SSL section and uncomment all lines under the SSL section. 
#     ########################################  Non-SSL  ########################################
#     # server_name localhost;
#     server_name chat.eureko.ai;
 
#     # Increase the client_max_body_size to allow larger file uploads
#     # The default limits for image uploads as of 11/22/23 is 20MB/file, and 25MB/request
#     client_max_body_size 25M;

#     location /api {
#         proxy_pass http://api:3080/api;
#     }

#     location / {
#         proxy_pass http://api:3080;
#     }

#     ########################################  SSL  ########################################
# #    # Redirect all http traffic to https
# #    location / {
# #        return 301 https://$host$request_uri;
# #    }
# }


# Secure default configuration with SSL enabled
# Based on Mozilla SSL Configuration Generator and provided configuration

# Block to handle direct IP access and undefined server names
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    ssl_certificate /etc/letsencrypt/live/chat.eureko.ai/fullchain.pem; # Use your cert paths
    ssl_certificate_key /etc/letsencrypt/live/chat.eureko.ai/privkey.pem; # Use your cert paths
    server_name _; # Catch all other domain requests or direct IP access
    return 403; # Forbidden or use 'return 444;' to drop the request immediately without response
}

# Redirect HTTP to HTTPS for your domain
server {
    listen 80;
    listen [::]:80;
    server_name chat.eureko.ai; # Your domain

    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server configuration for your domain
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2; # IPv6 support

    server_name chat.eureko.ai; # Your domain

    # SSL Certificate settings
    ssl_certificate /etc/letsencrypt/live/chat.eureko.ai/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/chat.eureko.ai/privkey.pem; # managed by Certbot

    # Recommended SSL settings
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot or replace with Mozilla's recommended settings
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot or Mozilla's recommended dhparam

    # Increase the client_max_body_size to allow larger file uploads
    client_max_body_size 25M;

    # Proxy settings for the API and front-end
    location /api {
        proxy_pass http://api:3080/api; # or use http://api:3080/api if 'api' is a service name in Docker
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location / {
        proxy_pass http://api:3080; # or use http://api:3080 if 'api' is a service name in Docker
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}

#server {
#    listen 443 ssl http2;
#    listen [::]:443 ssl http2;

#    ssl_certificate /etc/nginx/ssl/nginx.crt;
#    ssl_certificate_key /etc/nginx/ssl/nginx.key;
#    ssl_session_timeout 1d;
#    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
#    ssl_session_tickets off;

#    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /etc/nginx/ssl/dhparam
#    ssl_dhparam /etc/nginx/ssl/dhparam;

#    # intermediate configuration
#    ssl_protocols TLSv1.2 TLSv1.3;
#    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
#    ssl_prefer_server_ciphers off;

#    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
#    add_header Strict-Transport-Security "max-age=63072000" always;

#    # OCSP stapling
#    ssl_stapling on;
#    ssl_stapling_verify on;

#    # verify chain of trust of OCSP response using Root CA and Intermediate certs
#    ssl_trusted_certificate /etc/nginx/ssl/ca.crt;

#    # replace with the IP address of your resolver
#    resolver 127.0.0.1;

#    server_name localhost;
 
#    # Increase the client_max_body_size to allow larger file uploads
#    # The default limits for image uploads as of 11/22/23 is 20MB/file, and 25MB/request
#    client_max_body_size 25M;

#    location /api {
#        proxy_pass http://api:3080/api;
#    }

#    location / {
#        proxy_pass http://api:3080;
#    }
#}
